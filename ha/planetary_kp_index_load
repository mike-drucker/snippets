#!/usr/bin/env python

from local_token import HA_TOKEN
import requests
import json
import csv
import os
from datetime import datetime

def LAST_COMPLETED_FILENAME():
    return 'noaa-planetary-k-index-forecast_completed.csv'

def DELTA_FILENAME():
    return '../noaa-planetary-k-index-forecast_delta.csv'

def download_data():
    url = "https://services.swpc.noaa.gov/products/noaa-planetary-k-index-forecast.json"
    headers = {"content-type": "application/json"}
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"Failed to Download Data. Status Code: {response.status_code} Response Body: {response.text}")
    
    forecast = json.loads(response.text)
    header = forecast[0]
    data = forecast[1:]
    
    processed_data = []
    for row in data:
        time_tag = datetime.strptime(row[0], "%Y-%m-%dT%H:%M:%SZ")
        kp_value = row[1]
        processed_data.append({
            "statistic_id": "sensor:planetary_kp_index",
            "unit": "kp",
            "start": time_tag.strftime('%d.%m.%Y %H:%M'),
            "min": kp_value,
            "max": kp_value,
            "mean": kp_value
        })
    
    return processed_data

def get_existing():
    if os.path.isfile(LAST_COMPLETED_FILENAME()):
        with open(LAST_COMPLETED_FILENAME(), mode='r') as file:
            reader = csv.DictReader(file, delimiter='\t')
            existing_data = [row for row in reader]
        return existing_data
    else:
        return []

def get_delta_data(forecast, existing):
    existing_keys = {(row['statistic_id'], row['start']) for row in existing}
    
    delta = [row for row in forecast if (row['statistic_id'], row['start']) not in existing_keys]
    
    print('DELTA:')
    for row in delta:
        print(row)
    
    return delta

def save_delta(delta_data):
    with open(DELTA_FILENAME(), mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=['statistic_id', 'unit', 'start', 'min', 'max', 'mean'], delimiter='\t')
        writer.writeheader()
        writer.writerows(delta_data)

def update_existing(forecast):
    with open(LAST_COMPLETED_FILENAME(), mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=['statistic_id', 'unit', 'start', 'min', 'max', 'mean'], delimiter='\t')
        writer.writeheader()
        writer.writerows(forecast)

forecast_data = download_data()
existing_data = get_existing()
delta_data = get_delta_data(forecast_data, existing_data)
save_delta(delta_data)
update_existing(forecast_data)
